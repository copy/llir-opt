#!/usr/bin/env python

from collections import defaultdict, deque
import argparse
import base64
import os
import sys
import shutil
import subprocess
import tempfile
import platform
import gc


################################################################################
# Operands to instructions and directives
################################################################################
class Register(object):
  def __init__(self, reg):
    self.reg = reg

  def str(self):
    return self.reg

  def rename(self, sym):
    pass

class Immediate(object):
  def __init__(self, imm):
    self.imm = imm

  def str(self):
    return self.imm

  def rename(self, sym):
    pass

class Symbol(object):
  def __init__(self, label, imm):
    self.label = label
    self.imm = imm

  def str(self):
    if self.imm < 0:
      return '%s-%d' % (self.label, -self.imm)
    if self.imm > 0:
      return '%s+%d' % (self.label, +self.imm)
    return self.label

  def rename(self, sym):
    self.label = sym(self.label)

class String(object):
  def __init__(self, value):
    self.value = value

  def str(self):
    return self.value

  def rename(self, sym):
    pass



################################################################################
# Instructions which are part of atoms
################################################################################
class Directive(object):
  def __init__(self, op, args):
    self.op = op
    self.args = args

  def str(self):
    return '  %s %s' % (
        self.op.ljust(20),
        ', '.join(x.str() for x in self.args)
    )

  def rename(self, sym):
    for arg in self.args:
      arg.rename(sym)

class Instruction(object):
  def __init__(self, op, args, annot):
    self.op = op
    self.args = args
    self.annot = annot

  def str(self):
    return '  %s %s%s' % (
        self.op.ljust(20),
        ', '.join(x.str() for x in self.args),
        '' if not self.annot else ' ' + ' '.join('@' + a for a in self.annot)
    )

  def rename(self, sym):
    for arg in self.args:
      arg.rename(sym)

class Label(object):
  def __init__(self, label):
    self.label = label
    self.is_weak = False
    self.is_global = False

  def str(self):
    return self.label + ':'

  def rename(self, sym):
    self.label = sym(self.label)



################################################################################
# A function, grouping instructions together.
################################################################################
class Function(object):
  def __init__(self, label, insts):
    self.label = label
    self.pre = insts
    self.insts = []
    self.needs = set()
    self.hidden = True

  def rename(self, sym):
    self.label = sym(self.label)
    for pre in self.pre:
      pre.rename(sym)
    for insts in self.insts:
      insts.rename(sym)
    self.needs = {sym(n) for n in self.needs}

  def str(self, roots):
    is_root = not self.hidden or self.label in roots
    return '%s%s:\n%s\n%s' % (
        '\n'.join(s.str() for s in self.pre) + ('\n' if self.pre else ''),
        self.label,
        '  .visibility'.ljust(22) + ' ' + ('extern' if is_root else 'hidden'),
        '\n'.join(i.str() for i in self.insts)
    )


################################################################################
# A module, corresponding to an object file.
################################################################################
class Module(object):
  def __init__(self, name, ident, data):
    self.name = name
    self.ident = ident
    self._insts = []
    self.parsed = False

    self._code = []
    self._data = defaultdict(list)

    self._weaks = set()
    self._globl = set()
    self._defs = set()
    self._needs = set()
    self._private = set()

    for line in data.split('\n'):
      line = line.replace('\t', ' ').strip()
      if not line: continue

      if line.startswith('.globl'):
        self._globl.add([t for t in line.split(' ') if t][1])
        continue
      if line.startswith('.weak'):
        self._weaks.add([t for t in line.split(' ') if t][1])
        continue
      if line.startswith('.comm'):
        args = ' '.join(line.split(' ')[1:]).split('#')[0].strip().split(',')
        name, size, align = args

        self._weaks.add(name)

        self._insts.append('.data data')
        self._insts.append(name + ':')
        self._insts.append('.align ' + str(align))
        self._insts.append('.space ' + str(size))
        continue

      self._insts.append(line)

    self._globl = self._globl | self._weaks

  def has_weak(self, sym):
    return sym in self._weaks

  def get_globs(self):
    return self._globl

  def get_weaks(self):
    return self._weaks

  def get_defs(self):
    self._parse()
    return self._defs

  def get_private(self):
    self._parse()
    return self._private

  def get_needs(self):
    self._parse()
    return self._needs

  def code(self):
    self._parse()
    return self._code

  def data(self):
    self._parse()
    return self._data

  def _parse(self):
    """Parses a file, extracting instructions."""

    if self.parsed: return
    self.parsed = True

    def parsed_insts():
      """Helper generator to parse the stream into instructions."""
      for line in self._insts:
        # Find an empty line.
        if '"' not in line:
          line = line.split('#')[0].strip('\t ').replace('\t', ' ')
        if not line: continue

        # Split off arguments and annotations.
        cmd = line.split(' ')[0].split('\t')[0]
        if cmd == '.ascii' or cmd == '.asciz':
          annots = []
          args = [line[len(cmd):]]
        else:
          tokens = line.split(' @')
          line = tokens[0]
          annots = tokens[1:]
          args = [x for x in (t.strip('\t ') for t in line[len(cmd):].split(',')) if x]

        # Rewrite some commands.
        if cmd == '.section' and args[0] == '".note.GNU-stack"':
          continue
        if cmd in ['.addrsig', '.addrsig_sym', '.local', '.hidden']:
          continue
        if cmd == '.text':
          cmd = '.code'
          args = []
        if cmd == '.bss':
          cmd = '.data'
          args = ['bss']
        if cmd == '.const':
          cmd = '.data'
          args = ['const']
        if cmd == '.section' and args[0] == '__TEXT':
          cmd = '.code'
          args = []
        if cmd == '.section' and args[0].startswith('.rodata'):
          cmd = '.data'
          args = ['const']

        def parse(arg):
          if arg.startswith('$') or arg.startswith('['):
            return Register(arg)
          if '"' in arg:
            return String(arg)
          if '+' in arg and not arg.startswith('+'):
            tokens = arg.split('+')
            return Symbol(tokens[0].split('@')[0], +int(tokens[1]))
          if '-' in arg and not arg.startswith('-'):
            tokens = arg.split('-')
            return Symbol(tokens[0].split('@')[0], -int(tokens[1]))
          if arg.startswith('0x') or arg.startswith('-') or arg.isdigit():
            return Immediate(arg)
          return Symbol(arg.split('@')[0], 0)

        if cmd not in ['.call', '.args', '.code', '.data']:
          args = [parse(arg) for arg in args]
        else:
          args = [Immediate(arg) for arg in args]

        if cmd.endswith(':'):
          # Label
          yield Label(cmd[:-1])
        elif not cmd.startswith('.'):
          # Instruction
          yield Instruction(cmd, args, annots)
        else:
          # Directive
          if cmd in ['.file', '.ident']:
            continue
          if cmd == '.asciz':
            yield Directive('.ascii', [args[0]])
            yield Directive('.space', [Immediate("1")])
          elif cmd == '.p2align':
            yield Directive('.align', [Immediate(str(2**int(args[0].imm)))])
          else:
            yield Directive(cmd, args)

    seg = None
    func = None
    insts = []

    needs = set()
    defs = set()

    for i in parsed_insts():
      # Split the stream into segments.

      if isinstance(i, Directive):
        if i.op == '.code':
          seg = None;
          func = None;
          continue
        if i.op == '.data':
          name = i.args[0].imm if i.args else 'data'
          seg = self._data[name]
          func = None
          continue
        if i.op == '.visibility':
          if not func:
            raise Error('visibility not in function')
          if i.args[0].label == 'extern':
            func.hidden = False
            continue
          if i.args[0].label == 'hidden':
            func.hidden = True
            continue


      if seg is None:
        if isinstance(i, Label):
          if not i.label.startswith('.L'):
            defs.add(i.label)
            func = Function(i.label, insts)
            self._code.append(func)
            insts = []
          else:
            func.insts.append(i)
          continue
        if isinstance(i, Directive):
          if i.op == '.end':
            continue

        if not func:
          insts.append(i)
        else:
          func.insts.append(i)
      else:
        if isinstance(i, Label):
          defs.add(i.label)
          seg.append(i)
          continue

        seg.append(i)

      for arg in i.args:
        if isinstance(arg, Symbol) and not arg.label.startswith('.L'):
          needs.add(arg.label)
          if func:
            func.needs.add(arg.label)

    self._needs = needs - defs
    self._defs = defs & self._globl
    self._private = defs - self._globl
    self._insts = []


def emit_code(seg, o, funcs, roots):
  """Emits a segment of an object."""

  o.write('\t%s\n' % seg)
  for f in funcs:
    o.write(f.str(roots))
    o.write('\n')
  o.flush()


def emit_data(seg, o, ops):
  """Emits a segment of an object."""

  o.write('\t%s\n' % seg)
  for op in ops:
    o.write(op.str())
    o.write('\n')
  o.flush()


def link_segment(m, target, src, defs, weaks, rename):
  """Links a module into the segment."""

  skip = False
  for inst in src:
    if isinstance(inst, Label) or isinstance(inst, Function):
      skip = m.has_weak(inst.label) and inst.label in defs
    if not skip:
      inst.rename(rename)
      target.append(inst)


def read_archive(file):
  """Loads modules from an archive."""

  with open(file, 'r') as f:
    lines = f.readlines()
    assert lines[0].strip() == 'GenM'
    for line in lines[1:]:
      name, data = line.split(': ')
      ident = file + '/' + name
      data = base64.b64decode(bytearray(data, 'UTF-8'))
      yield ident, data


def is_archive(file):
  """Checks if the file is a GenM archive."""
  with open(file, 'r') as f:
    return f.read(4) == 'GenM'


def link(output, files, libs, include_path, library_paths, dylib, reloc=False):
  """Entry point of the linker."""

  modules = {}
  extern_libs = ['-lc']
  if library_paths:
    for path in library_paths:
      extern_libs.append('-L{}'.format(path))

  def find_library(lib, library_paths):
    """Returns the name of the library."""
    if library_paths:
      for path in library_paths:
        full_path = os.path.abspath(os.path.join(path, 'lib%s.a' % lib))
        if os.path.exists(full_path) and is_archive(full_path):
          return full_path
    extern_libs.append('-l{}'.format(lib))
    return None

  # Load the input objects.
  for file in files:
    if file in modules: continue
    ext = os.path.splitext(file)[1]

    # Object files.
    if ext == '.o':
      with open(file, 'r') as f:
        data = f.read()
        modules[file] = Module(file, len(modules), data)
      continue

    # Archives containing object files.
    if ext == '.a':
      for ident, data in read_archive(file):
        if ident in modules: continue
        modules[ident] = Module(ident, len(modules), data)
      continue

    # Unknown extension.
    raise Exception('unknown file: %s' % file)

  # Load the input libs.
  if libs:
    for lib in libs:
      full_path = find_library(lib, library_paths)
      if full_path:
        for ident, data in read_archive(full_path):
          if ident in modules: continue
          modules[ident] = Module(ident, len(modules), data)

  # Collect extern root symbols.
  roots = set()
  def is_root(sym):
    if dylib:
      return True
    else:
      return sym == 'main'

  defined_in = {}
  all_globls = set()
  all_weaks = set()
  externs = set()
  objects = []
  for file, m in modules.iteritems():
    for sym in m.get_globs():
      if is_root(sym) or reloc:
        roots.add(sym)
        if not file in objects:
          objects.append(file)
    all_globls |= m.get_globs()
    for d in m.get_globs():
      all_globls.add(d)
      defined_in[d] = file

  # Select the transitive dependencies of the main object.
  def traverse(obj):
    for n in list(modules[obj].get_needs()):
      if n not in defined_in:
        externs.add(n)
        continue
      src = defined_in[n]
      if src in objects:
        continue
      if not src in objects:
        objects.append(src)

  for obj in objects:
    all_weaks |= modules[obj].get_weaks()
    traverse(obj)

  segments = set()
  for obj in objects:
    segments |= set(modules[obj].data().keys())

  # Link the segments together.
  code = []
  data = defaultdict(list)

  end_marker = Directive('.end', [])

  all_defs = set()
  for obj in objects:
    m = modules[obj]

    def rename(sym):
      if sym not in m.get_private() and (sym in all_globls or sym in externs):
        return sym
      return '%s$%d' % (sym, m.ident)

    link_segment(m, code, m.code(), all_defs, all_weaks, rename)
    for name in segments:
      if name in m.data():
        link_segment(m, data[name],  m.data()[name],  all_defs, all_weaks, rename)
        data[name].append(end_marker)
    all_defs |= m.get_defs()

  # Build a map of all names to functions.
  funcs = {f.label: f for f in code}

  # Find the set of root symbols.
  q = deque(roots)
  for i in [inst for _, segment in data.iteritems() for inst in segment]:
    if isinstance(i, Directive):
      for arg in i.args:
        if isinstance(arg, Symbol) and arg.label in funcs:
          q.append(arg.label)

  live_syms = set()
  while q:
    func = q.pop()
    if func in live_syms:
      continue
    live_syms.add(func)
    if func not in funcs:
      continue
    for s in funcs[func].needs:
      if s in live_syms:
        continue
      q.append(s)

  # Output the linked segments.
  with open(output, 'w') as o:
    for ext in sorted(externs & live_syms):
      o.write('\t.extern %s\n' % ext)

    emit_code('.code',  o, (f for f in code if f.label in live_syms), roots)
    for name in segments:
      emit_data('.data %s' % name, o, data[name])

  return extern_libs


def merge(output, files):
  """Concatenate all files into output."""

  modules = []

  def get_modules():
    for file in set(files):
      ext = os.path.splitext(file)[1]

      # Object files.
      if ext == '.o':
        if file in modules: continue
        with open(file, 'r') as f:
          m = Module(file, len(modules), f.read())
          modules.append(m)
          yield m
        continue

      # Archives containing object files.
      if ext == '.a':
        for ident, data in read_archive(file):
          if ident in modules: continue
          m = Module(ident, len(modules), data)
          modules.append(m)
          yield m
        continue

      # Unknown extension.
      raise Exception('unknown file: %s' % file)

  # Parse all modules and identify symbols.
  all_globs = set()
  all_weaks = set()
  all_defs = set()
  all_needs = set()
  for m in get_modules():
    all_globs |= m.get_globs()
    all_weaks |= m.get_weaks()
    all_defs |= m.get_defs()
    all_needs |= m.get_needs()

  # Find the name of all segments.
  segments = set()
  for m in modules:
    segments |= set(m.data().keys())

  defs = set()
  with open(output, 'w') as o:

    def emit_func(func):
      """Helper to emit a function."""

      o.write(func.str([]))
      o.write('\n')
      o.flush()

    def emit_inst(inst):
      """Helper to emit an instruction."""

      o.write(inst.str())
      o.write('\n')
      o.flush()

    for sym in sorted(all_globs):
      if sym in all_weaks:
        o.write('\t.weak %s\n' % sym)
      else:
        o.write('\t.globl %s\n' % sym)

    for m in modules:
      def rename(sym):
        """Rename method for everything in the module."""
        if sym in all_globs or (sym in all_needs and sym not in all_defs):
          return sym
        return '%s$%d' % (sym, m.ident)

      def emit_segment(items, emitter):
        skip = False
        for item in items:
          if isinstance(item, Label):
            skip = m.has_weak(item.label) and item.label in defs
          if not skip:
            item.rename(rename)
            emitter(item)

      # Emit all functions.
      if m.code():
        o.write('\t.code\n')
        emit_segment(m.code(), emit_func)

      # Emit all data.
      for name in segments:
        if name in m.data():
          o.write('\t.data %s\n' % name)
          emit_segment(m.data()[name], emit_inst)

    defs |= m.get_defs()


def build_executable(obj, exe, libs):
  """Builds an executable froma an object file."""
  if platform.system() == 'Linux':
    subprocess.check_call(['musl-gcc', obj, '-o', exe, '-static'] + libs)
    return
  if platform.system() == 'Darwin':
    subprocess.check_call(['gcc', obj, '-o', exe] + libs)
    return
  raise Error('Unsupported platform')


if __name__ == '__main__':
  # Parse arguments for the linker..
  parser = argparse.ArgumentParser(description='GenM linker (Text)')
  parser.add_argument('-dylib', action='store_true')
  parser.add_argument(
      '-I',
      help='Include search path',
      action='append'
  )
  parser.add_argument(
      '-L',
      help='Library search path',
      action='append'
  )
  parser.add_argument(
      '-l',
      help='Library to link with',
      action='append'
  )
  parser.add_argument(
      '-o',
      help='Output file'
  )
  parser.add_argument(
      '-r',
      help='Relocatable output',
      action='store_true'
  )
  parser.add_argument(
      '-Wl',
      action='append'
  )
  parser.add_argument('-O0', help='Optimisation', action='store_true')
  parser.add_argument('-O1', help='Optimisation', action='store_true')
  parser.add_argument('-O2', help='Optimisation', action='store_true')
  parser.add_argument('-O3', help='Optimisation', action='store_true')
  parser.add_argument('-Wl,-keep_dwarf_unwind', action='store_true')
  args, files = parser.parse_known_args()

  # Find the optimisation level.
  opt_level = '-O0'
  if args.O1: opt_level = '-O1'
  if args.O2: opt_level = '-O2'
  if args.O3: opt_level = '-O3'

  # Emit the output.
  if args.r:
    # Merge arguments into a single object file.
    merge(args.o, files)
  elif args.o.endswith('.genm'):
    # Run the GenM text linker - produce IR output.
    link(args.o, files, args.l, args.I, args.L, args.dylib, args.r)
  else:
    # Run the GenM binary linker - produce an executable.
    with tempfile.NamedTemporaryFile(suffix='.genm') as genm:
      with tempfile.NamedTemporaryFile(suffix='.o') as obj:
        libs = link(genm.name, files, args.l, args.I, args.L, args.dylib)
        gc.collect()
        subprocess.check_call([
            'genm',
            genm.name,
            '-o=%s' % obj.name,
            opt_level
        ])
        build_executable(obj.name, args.o, libs)
